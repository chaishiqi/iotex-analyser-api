syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "include/graphql.proto";
// import "include/pagination.proto";
option go_package = "./api";

message ChainRequest {

}

message VotingResultMeta {
    uint64 totalCandidates = 1; // total candidates
    string totalWeightedVotes = 2; // total weighted votes
    string votedTokens = 3; // voted tokens
}

message ChainResponse {
    uint64 mostRecentEpoch = 1; // most recent epoch
    uint64 mostRecentBlockHeight = 2; // most recent block height
    string totalSupply = 3; // total supply
    string totalCirculatingSupply = 4; // total circulating supply
    string totalCirculatingSupplyNoRewardPool = 5; // total circulating supply no reward pool
    VotingResultMeta votingResultMeta = 6; // voting result meta
    string exactCirculatingSupply = 7; // exact circulating supply
}

message MostRecentTPSRequest {
  uint64 blockWindow = 1; // number of last blocks that are backtracked to compute TPS
}

message MostRecentTPSResponse {
  double mostRecentTPS = 1; // latest transactions per second
}

message NumberOfActionsRequest {
  uint64 startEpoch = 1; // starting epoch number
  uint64 epochCount = 2; // epoch count
}

message NumberOfActionsResponse {
  bool exist = 1; // whether the starting epoch number is less than the most recent epoch number
  uint64 count = 2; // number of actions
}

message TotalTransferredTokensRequest {
  uint64 startEpoch = 1; // starting epoch number
  uint64 epochCount = 2; // epoch count
}

message TotalTransferredTokensResponse {
  string totalTransferredTokens = 1; // total tranferred tokens
}

service ChainService {
  rpc Chain(ChainRequest) returns (ChainResponse) {
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "Chain" // query name
    };
    option (google.api.http) = {
      post: "/api.ChainService.Chain"
      body: "*"
    };
  };

  // MostRecentTPS gives the latest transactions per second
  rpc MostRecentTPS(MostRecentTPSRequest) returns (MostRecentTPSResponse) {
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "MostRecentTPS" // query name
    };
    option (google.api.http) = {
      post: "/api.ChainService.MostRecentTPS"
      body: "*"
    };
  };

  // NumberOfActions gives the number of actions
  rpc NumberOfActions(NumberOfActionsRequest) returns (NumberOfActionsResponse) {
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "NumberOfActions" // query name
    };
    option (google.api.http) = {
      post: "/api.ChainService.NumberOfActions"
      body: "*"
    };
  };
  // TotalTransferredTokens gives the amount of tokens transferred within a time frame
  rpc TotalTransferredTokens(TotalTransferredTokensRequest) returns (TotalTransferredTokensResponse) {
    option (graphql.schema) = {
      type: QUERY   // declare as Query
      name: "TotalTransferredTokens" // query name
    };
    option (google.api.http) = {
      post: "/api.ChainService.TotalTransferredTokens"
      body: "*"
    };
  };
}