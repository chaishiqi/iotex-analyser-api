syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "include/graphql.proto";
option go_package = "./api";

message IotexBalanceByHeightRequest {
  repeated string address = 1; //address lists
  uint64 height = 2; //block height
}

message IotexBalanceByHeightResponse {
  uint64 height = 1; //block height
  repeated string balance  = 2; //balance at the given height.
}

message Erc20TokenBalanceByHeightResponse {
  uint64 height = 1;
  string contract_address = 2;
  repeated string balance  = 3;
  uint64 decimals = 4;
}

message Erc20TokenBalanceByHeightRequest {
  repeated string address = 1;
  uint64 height = 2;
  string contract_address = 3;
}


message ActiveAccountsRequest {
  uint64 count = 1; // number of account addresses to be queried for active accounts
}

message ActiveAccountsResponse {
  repeated string activeAccounts = 1; //list of account addresses
}

message OperatorAddressRequest {
  string aliasName = 1; // delegate's alias name
}

message OperatorAddressResponse {
  bool exist = 1; // whether the alias name exists
  string operatorAddress = 2; // operator address associated with the given alias name
}

message AliasRequest {
  string operatorAddress = 1; // delegate's operator address
}

message AliasResponse {
  bool exist = 1; // whether the operator address exists
  string aliasName = 2;// delegate's alias name
}

message TotalNumberOfHoldersRequest {
}

message TotalNumberOfHoldersResponse {
  uint64 totalNumberOfHolders = 1; // total number of IOTX holders so far
}

message TotalAccountSupplyRequest {
}

message TotalAccountSupplyResponse {
  string totalAccountSupply = 1; // total amount of tokens held by IoTeX accounts
}

message ContractInfoRequest {
  string contractAddress = 1; // contract address
}
message ContractInfoResponse {
  bool exist = 1; // whether the contract address exists
  string deployer = 2; // contract creator 
  string createTime = 3; // contract create time
  uint64 callTimes = 4; // contract call times
  string accumulatedGas = 5; // accumulated transaction fee
}
service AccountService {
  // IotexBalanceByHeight returns the balance of the given address at the given height.
  rpc IotexBalanceByHeight(IotexBalanceByHeightRequest) returns (IotexBalanceByHeightResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "IotexBalanceByHeight"
    };
    option (google.api.http) = {
      post: "/api.AccountService.IotexBalanceByHeight"
      body: "*"
    };
  };
  rpc Erc20TokenBalanceByHeight(Erc20TokenBalanceByHeightRequest) returns (Erc20TokenBalanceByHeightResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "Erc20TokenBalanceByHeight"
    };
    option (google.api.http) = {
      post: "/api.AccountService.Erc20TokenBalanceByHeight"
      body: "*"
    };
  };
  // ActiveAccounts lists most recently active accounts
  rpc ActiveAccounts(ActiveAccountsRequest) returns (ActiveAccountsResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "ActiveAccounts"
    };
    option (google.api.http) = {
      post: "/api.AccountService.ActiveAccounts"
      body: "*"
    };
  };
  // OperatorAddress finds the delegate's operator address given the delegate's alias name
  rpc OperatorAddress(OperatorAddressRequest) returns (OperatorAddressResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "OperatorAddress"
    };
    option (google.api.http) = {
      post: "/api.AccountService.OperatorAddress"
      body: "*"
    };
  };
  // Alias finds the delegate's alias name given the delegate's operator address
  rpc Alias(AliasRequest) returns (AliasResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "Alias"
    };
    option (google.api.http) = {
      post: "/api.AccountService.Alias"
      body: "*"
    };
  };
  // TotalNumberOfHolders returns total number of IOTX holders so far
  rpc TotalNumberOfHolders(TotalNumberOfHoldersRequest) returns (TotalNumberOfHoldersResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "TotalNumberOfHolders"
    };
    option (google.api.http) = {
      post: "/api.AccountService.TotalNumberOfHolders"
      body: "*"
    };
  };
  // TotalAccountSupply returns total amount of tokens held by IoTeX accounts
  rpc TotalAccountSupply(TotalAccountSupplyRequest) returns (TotalAccountSupplyResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "TotalAccountSupply"
    };
    option (google.api.http) = {
      post: "/api.AccountService.TotalAccountSupply"
      body: "*"
    };
  };  
  // ContractInfo returns contract info by address, include contract creator, contract create time, contract call times, accumulated transaction fee
  rpc ContractInfo(ContractInfoRequest) returns (ContractInfoResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "ContractInfo"
    };
    option (google.api.http) = {
      post: "/api.AccountService.ContractInfo"
      body: "*"
    };
  };
}