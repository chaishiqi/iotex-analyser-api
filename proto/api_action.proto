syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "include/graphql.proto";
import "include/pagination.proto";
option go_package = "./api";

message ActionRequest {
  string address = 1;
  string actHash = 2;
  pagination.Pagination pagination = 3;
}

message ActionResponse {
  bool exist = 1;
  uint64 count = 2;
  repeated ActionInfo actionList = 3;
  repeated EvmTransferInfo evmTransferList = 4;
  repeated XrcInfo xrcList = 5;
}

message ActionInfo {
  string actHash = 1; // action hash
  string blkHash = 2; // block hash
  string actType = 3; // action type
  string sender = 4; // sender address
  string recipient = 5; // recipient address
  string amount = 6; // amount transferred
  uint64 timestamp = 7; // unix timestamp
  string gasFee = 8; // gas fee
  uint64 blkHeight = 9; // block height
}

message EvmTransferInfo {
  string actHash = 1;
  string blkHash = 2;
  string from = 3;
  string to = 4;
  string quantity = 5;
  uint64 blkHeight = 6;
  uint64 timestamp = 7;
}

message XrcInfo {
  string actHash = 1;
  string from = 2;
  string to = 3;
  string quantity = 4;
  uint64 blkHeight = 5;
  uint64 timestamp = 6;
  string contract = 7;
}

message ActionByDatesRequest {
  uint64 startDate = 1; // start date in unix epoch time
  uint64 endDate = 2; // end date in unix epoch time
  pagination.Pagination pagination = 3;
}
message ActionByDatesResponse {
  bool exist = 1; // whether actions exist within the time frame
  repeated ActionInfo actions = 2;
  uint64 count = 3; // total number of actions within the time frame
}

message ActionByHashRequest {
  string actHash = 1; // action hash
}
message ActionByHashResponse {
  bool exist = 1; // whether actions exist within the time frame
  ActionInfo actionInfo = 2;
  message EvmTransfers {
    string sender = 1; // sender address
    string recipient = 2; // recipient address
    string amount = 3; // amount transferred
  }
  repeated EvmTransfers evmTransfers = 3;
}

message ActionByAddressRequest {
  string address = 1; // sender address or recipient address
  pagination.Pagination pagination = 2;
}
message ActionByAddressResponse {
  bool exist = 1; // whether actions exist for the given address
  repeated ActionInfo actions = 2;
  uint64 count = 3; // total number of actions for the given address
}

message ActionByTypeRequest {
  string type = 1; // action type
  pagination.Pagination pagination = 2;
}
message ActionByTypeResponse {
  bool exist = 1; // whether actions exist for the given type
  repeated ActionInfo actions = 2;
  uint64 count = 3; // total number of actions for the given type
}

message EvmTransfersByAddressRequest {
  string address = 1; // sender address or recipient address
  pagination.Pagination pagination = 2;
}

message EvmTransfersByAddressResponse {
  bool exist = 1; // whether EVM transfers exist for the given address
  uint64 count = 2; // total number of EVM transfers for the given address
  message EvmTransfer {
    string actHash = 1; // action hash
    string blkHash = 2; // block hash
    string sender = 3; // sender address
    string recipient = 4; // recipient address
    string amount = 5; // amount transferred
    uint64 blkHeight = 6; // block height
    uint64 timestamp = 7; // unix timestamp
  }
  repeated EvmTransfer evmTransfers = 3;
}
service ActionService {
  rpc ActionByVoter(ActionRequest) returns (ActionResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "ActionByVoter"
    };
    option (google.api.http) = {
      post: "/api.ActionService.ActionByVoter"
      body: "*"
    };
  };
  rpc GetXrc20ByAddress(ActionRequest) returns (ActionResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "GetXrc20ByAddress"
    };
    option (google.api.http) = {
      post: "/api.ActionService.GetXrc20ByAddress"
      body: "*"
    };
  };
  //ActionByDates finds actions by dates
  rpc ActionByDates(ActionByDatesRequest) returns (ActionByDatesResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "ActionByDates"
    };
    option (google.api.http) = {
      post: "/api.ActionService.ActionByDates"
      body: "*"
    };
  };
  //ActionByHash finds actions by hash
  rpc ActionByHash(ActionByHashRequest) returns (ActionByHashResponse) {
    option (graphql.schema) = {
      type: QUERY 
      name: "ActionByHash"
    };
    option (google.api.http) = {
      post: "/api.ActionService.ActionByHash"
      body: "*"
    };
  };
  //ActionByAddress finds actions by address
  rpc ActionByAddress(ActionByAddressRequest) returns (ActionByAddressResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "ActionByAddress"
    };
    option (google.api.http) = {
      post: "/api.ActionsService.ActionByAddress"
      body: "*"
    };
  };
  //ActionByType finds actions by action type
  rpc ActionByType(ActionByTypeRequest) returns (ActionByTypeResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "ActionByType"
    };
    option (google.api.http) = {
      post: "/api.ActionsService.ActionByType"
      body: "*"
    };
  };
  // EvmTransfersByAddress finds EVM transfers by address
  rpc EvmTransfersByAddress(EvmTransfersByAddressRequest) returns (EvmTransfersByAddressResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "EvmTransfersByAddress" 
    };
    option (google.api.http) = {
      post: "/api.ActionService.EvmTransfersByAddress"
      body: "*"
    };
  };

}