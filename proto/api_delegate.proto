syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "include/graphql.proto";
import "include/pagination.proto";
option go_package = "./api";


message BucketInfoRequest{
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
  pagination.Pagination pagination = 4; //Pagination info
}

message BucketInfoResponse {
  bool exist = 1; // whether the delegate has voting bucket information within the specified epoch range
  uint64 count = 2; // total number of buckets in the given epoch for the given delegate
	repeated BucketInfoList  bucketInfoList = 3; 
}

message BucketInfo {
  string voterEthAddress = 1; // voter’s ERC20 address
	string voterIotexAddress = 2; // voter's IoTeX address
	bool isNative = 3; // whether the bucket is native
	string votes = 4; // voter's votes
	string weightedVotes = 5; // voter’s weighted votes
	string remainingDuration = 6; // bucket remaining duration
	string startTime = 7; // bucket start time
	bool decay = 8; // whether the vote weight decays
  uint64 bucketID = 9; // bucket id
}

message BucketInfoList {
  uint64 epochNumber = 1; // epoch number
	uint64 count = 2; //total number of buckets in the given epoch for the given delegate
  repeated BucketInfo  bucketInfo = 3;
}

message BookKeepingRequest {
  uint64 startEpoch = 1; // epoch number to start from
  uint64 epochCount = 2; // number of epochs to query
  string delegateName =3; // name of the delegate
  pagination.Pagination pagination = 4; //Pagination info
  uint64 percentage = 5; // percentage of the reward to be paid to the delegate
  bool includeBlockReward = 6; // whether to include block reward
  bool includeFoundationBonus = 7; // whether to include foundation bonus
}

message BookKeepingResponse {
  bool exist = 1; // whether the delegate has bookkeeping information within the specified epoch range
  uint64 count = 2; // total number of reward distributions
  repeated DelegateRewardDistribution rewardDistribution = 3;
}

message DelegateRewardDistribution {
  string voterEthAddress = 1; // voter’s ERC20 address
  string voterIotexAddress = 2; // voter’s IoTeX address
  string amount = 3; // amount of reward distribution
}

message Productivity {
  bool exist = 1; // whether the delegate has productivity information within the specified epoch range
  uint64 production = 2; // number of block productions
  uint64 expectedProduction = 3; // number of expected block productions
}

message ProductivityRequest {
  uint64 startEpoch = 1; // starting epoch number
  uint64 epochCount = 2; // epoch count
  string delegateName =3; // producer name
}

message ProductivityResponse {
  Productivity productivity = 1;
}

message Reward {
  string blockReward = 1; // amount of block rewards
  string epochReward = 2; // amount of epoch rewards
  string foundationBonus = 3; // amount of foundation bonus
  bool exist = 4; // whether the delegate has reward information within the specified epoch range
}
message RewardRequest {
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
}

message RewardResponse {
  Reward reward = 1;
}

message HermesByDelegateRequest {
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
  pagination.Pagination pagination = 4; //Pagination info
}

message HermesByDelegateVoterInfo {
	string voterAddress = 1; // voter address
	uint64 fromEpoch = 2; // starting epoch 
	uint64 toEpoch = 3; // ending epoch
	string amount = 4; // distributino amount
	string actionHash = 5; // action hash
	string timestamp = 6; // timestamp
}

message HermesByDelegateDistributionRatio {
  uint64 epochNumber = 1; //epoch number
  double blockRewardRatio = 2; // ratio of block reward being distributed
  double epochRewardRatio = 3; // ratio of epoch reward being distributed
  double foundationBonusRatio = 4; // ratio of foundation bonus being distributed
}

message HermesByDelegateResponse {
  bool exist = 1; // whether the delegate has hermes information within the specified epoch range
  uint64 count = 2; // total number of reward distributions
  repeated HermesByDelegateVoterInfo voterInfoList = 3;
  string totalRewardsDistributed = 4; // total reward amount distributed
  repeated HermesByDelegateDistributionRatio distributionRatio = 5;
}

service DelegateService {
  // BucketInfo provides voting bucket detail information for candidates within a range of epochs
  rpc BucketInfo(BucketInfoRequest) returns (BucketInfoResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "BucketInfo"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.BucketInfo"
      body: "*"
    };
  };
  // BookKeeping gives delegates an overview of the reward distributions to their voters within a range of epochs
  rpc BookKeeping(BookKeepingRequest) returns (BookKeepingResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "BookKeeping"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.BookKeeping"
      body: "*"
    };
  };
  // Productivity gives block productivity of producers within a range of epochs
  rpc Productivity(ProductivityRequest) returns (ProductivityResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "Productivity"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.Productivity"
      body: "*"
    };
  };
  // Rewards provides reward detail information for candidates within a range of epochs
  rpc Reward(RewardRequest) returns (RewardResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "Reward"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.Reward"
      body: "*"
    };
  };
  // HermesByDelegate returns Hermes delegates' distribution history
  rpc HermesByDelegate(HermesByDelegateRequest) returns (HermesByDelegateResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "HermesByDelegate"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.HermesByDelegate"
      body: "*"
    };
  };
}