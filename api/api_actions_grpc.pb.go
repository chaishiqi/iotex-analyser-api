// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionsServiceClient is the client API for ActionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionsServiceClient interface {
	GetEvmTransferDetailListByAddress(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*EvmTransferDetailListByAddressResponse, error)
	GetAllActionsByAddress(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*AllActionsByAddressResponse, error)
}

type actionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActionsServiceClient(cc grpc.ClientConnInterface) ActionsServiceClient {
	return &actionsServiceClient{cc}
}

func (c *actionsServiceClient) GetEvmTransferDetailListByAddress(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*EvmTransferDetailListByAddressResponse, error) {
	out := new(EvmTransferDetailListByAddressResponse)
	err := c.cc.Invoke(ctx, "/api.ActionsService/GetEvmTransferDetailListByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsServiceClient) GetAllActionsByAddress(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*AllActionsByAddressResponse, error) {
	out := new(AllActionsByAddressResponse)
	err := c.cc.Invoke(ctx, "/api.ActionsService/GetAllActionsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionsServiceServer is the server API for ActionsService service.
// All implementations must embed UnimplementedActionsServiceServer
// for forward compatibility
type ActionsServiceServer interface {
	GetEvmTransferDetailListByAddress(context.Context, *ActionsRequest) (*EvmTransferDetailListByAddressResponse, error)
	GetAllActionsByAddress(context.Context, *ActionsRequest) (*AllActionsByAddressResponse, error)
	mustEmbedUnimplementedActionsServiceServer()
}

// UnimplementedActionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActionsServiceServer struct {
}

func (UnimplementedActionsServiceServer) GetEvmTransferDetailListByAddress(context.Context, *ActionsRequest) (*EvmTransferDetailListByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmTransferDetailListByAddress not implemented")
}
func (UnimplementedActionsServiceServer) GetAllActionsByAddress(context.Context, *ActionsRequest) (*AllActionsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActionsByAddress not implemented")
}
func (UnimplementedActionsServiceServer) mustEmbedUnimplementedActionsServiceServer() {}

// UnsafeActionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionsServiceServer will
// result in compilation errors.
type UnsafeActionsServiceServer interface {
	mustEmbedUnimplementedActionsServiceServer()
}

func RegisterActionsServiceServer(s grpc.ServiceRegistrar, srv ActionsServiceServer) {
	s.RegisterService(&ActionsService_ServiceDesc, srv)
}

func _ActionsService_GetEvmTransferDetailListByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServiceServer).GetEvmTransferDetailListByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ActionsService/GetEvmTransferDetailListByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServiceServer).GetEvmTransferDetailListByAddress(ctx, req.(*ActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionsService_GetAllActionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServiceServer).GetAllActionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ActionsService/GetAllActionsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServiceServer).GetAllActionsByAddress(ctx, req.(*ActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionsService_ServiceDesc is the grpc.ServiceDesc for ActionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ActionsService",
	HandlerType: (*ActionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvmTransferDetailListByAddress",
			Handler:    _ActionsService_GetEvmTransferDetailListByAddress_Handler,
		},
		{
			MethodName: "GetAllActionsByAddress",
			Handler:    _ActionsService_GetAllActionsByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_actions.proto",
}
