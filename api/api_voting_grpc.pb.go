// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingServiceClient interface {
	CandidateInfo(ctx context.Context, in *CandidateInfoRequest, opts ...grpc.CallOption) (*CandidateInfoResponse, error)
	// RewardSources provides reward sources for voters
	RewardSources(ctx context.Context, in *RewardSourcesRequest, opts ...grpc.CallOption) (*RewardSourcesResponse, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) CandidateInfo(ctx context.Context, in *CandidateInfoRequest, opts ...grpc.CallOption) (*CandidateInfoResponse, error) {
	out := new(CandidateInfoResponse)
	err := c.cc.Invoke(ctx, "/api.VotingService/CandidateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) RewardSources(ctx context.Context, in *RewardSourcesRequest, opts ...grpc.CallOption) (*RewardSourcesResponse, error) {
	out := new(RewardSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.VotingService/RewardSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServiceServer is the server API for VotingService service.
// All implementations must embed UnimplementedVotingServiceServer
// for forward compatibility
type VotingServiceServer interface {
	CandidateInfo(context.Context, *CandidateInfoRequest) (*CandidateInfoResponse, error)
	// RewardSources provides reward sources for voters
	RewardSources(context.Context, *RewardSourcesRequest) (*RewardSourcesResponse, error)
	mustEmbedUnimplementedVotingServiceServer()
}

// UnimplementedVotingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (UnimplementedVotingServiceServer) CandidateInfo(context.Context, *CandidateInfoRequest) (*CandidateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CandidateInfo not implemented")
}
func (UnimplementedVotingServiceServer) RewardSources(context.Context, *RewardSourcesRequest) (*RewardSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardSources not implemented")
}
func (UnimplementedVotingServiceServer) mustEmbedUnimplementedVotingServiceServer() {}

// UnsafeVotingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServiceServer will
// result in compilation errors.
type UnsafeVotingServiceServer interface {
	mustEmbedUnimplementedVotingServiceServer()
}

func RegisterVotingServiceServer(s grpc.ServiceRegistrar, srv VotingServiceServer) {
	s.RegisterService(&VotingService_ServiceDesc, srv)
}

func _VotingService_CandidateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).CandidateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VotingService/CandidateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).CandidateInfo(ctx, req.(*CandidateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_RewardSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).RewardSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VotingService/RewardSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).RewardSources(ctx, req.(*RewardSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingService_ServiceDesc is the grpc.ServiceDesc for VotingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CandidateInfo",
			Handler:    _VotingService_CandidateInfo_Handler,
		},
		{
			MethodName: "RewardSources",
			Handler:    _VotingService_RewardSources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_voting.proto",
}
