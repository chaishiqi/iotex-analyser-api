// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__enum_AllActionsByAddressResult_RecordType    *graphql.Enum        // enum AllActionsByAddressResult_RecordType in api_actions.proto
	gql__type_EvmTransferDetailResult                 *graphql.Object      // message EvmTransferDetailResult in api_actions.proto
	gql__type_EvmTransferDetailListByAddressResponse  *graphql.Object      // message EvmTransferDetailListByAddressResponse in api_actions.proto
	gql__type_AllActionsByAddressResult               *graphql.Object      // message AllActionsByAddressResult in api_actions.proto
	gql__type_AllActionsByAddressResponse             *graphql.Object      // message AllActionsByAddressResponse in api_actions.proto
	gql__type_ActionsRequest                          *graphql.Object      // message ActionsRequest in api_actions.proto
	gql__input_EvmTransferDetailResult                *graphql.InputObject // message EvmTransferDetailResult in api_actions.proto
	gql__input_EvmTransferDetailListByAddressResponse *graphql.InputObject // message EvmTransferDetailListByAddressResponse in api_actions.proto
	gql__input_AllActionsByAddressResult              *graphql.InputObject // message AllActionsByAddressResult in api_actions.proto
	gql__input_AllActionsByAddressResponse            *graphql.InputObject // message AllActionsByAddressResponse in api_actions.proto
	gql__input_ActionsRequest                         *graphql.InputObject // message ActionsRequest in api_actions.proto
)

func Gql__enum_AllActionsByAddressResult_RecordType() *graphql.Enum {
	if gql__enum_AllActionsByAddressResult_RecordType == nil {
		gql__enum_AllActionsByAddressResult_RecordType = graphql.NewEnum(graphql.EnumConfig{
			Name: "Api_Enum_AllActionsByAddressResult_RecordType",
			Values: graphql.EnumValueConfigMap{
				"NATIVE": &graphql.EnumValueConfig{
					Value: AllActionsByAddressResult_RecordType(0),
				},
				"XRC20": &graphql.EnumValueConfig{
					Value: AllActionsByAddressResult_RecordType(1),
				},
				"XRC721": &graphql.EnumValueConfig{
					Value: AllActionsByAddressResult_RecordType(2),
				},
				"EVMTRANSFER": &graphql.EnumValueConfig{
					Value: AllActionsByAddressResult_RecordType(3),
				},
			},
		})
	}
	return gql__enum_AllActionsByAddressResult_RecordType
}

func Gql__type_EvmTransferDetailResult() *graphql.Object {
	if gql__type_EvmTransferDetailResult == nil {
		gql__type_EvmTransferDetailResult = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_EvmTransferDetailResult",
			Fields: graphql.Fields{
				"actHash": &graphql.Field{
					Type: graphql.String,
				},
				"blkHeight": &graphql.Field{
					Type: graphql.Int,
				},
				"sender": &graphql.Field{
					Type: graphql.String,
				},
				"recipient": &graphql.Field{
					Type: graphql.String,
				},
				"blkHash": &graphql.Field{
					Type: graphql.String,
				},
				"amount": &graphql.Field{
					Type: graphql.String,
				},
				"timeStamp": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_EvmTransferDetailResult
}

func Gql__type_EvmTransferDetailListByAddressResponse() *graphql.Object {
	if gql__type_EvmTransferDetailListByAddressResponse == nil {
		gql__type_EvmTransferDetailListByAddressResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_EvmTransferDetailListByAddressResponse",
			Fields: graphql.Fields{
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"results": &graphql.Field{
					Type: graphql.NewList(Gql__type_EvmTransferDetailResult()),
				},
			},
		})
	}
	return gql__type_EvmTransferDetailListByAddressResponse
}

func Gql__type_AllActionsByAddressResult() *graphql.Object {
	if gql__type_AllActionsByAddressResult == nil {
		gql__type_AllActionsByAddressResult = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_AllActionsByAddressResult",
			Fields: graphql.Fields{
				"actHash": &graphql.Field{
					Type: graphql.String,
				},
				"blkHeight": &graphql.Field{
					Type: graphql.Int,
				},
				"sender": &graphql.Field{
					Type: graphql.String,
				},
				"recipient": &graphql.Field{
					Type: graphql.String,
				},
				"actType": &graphql.Field{
					Type: graphql.String,
				},
				"amount": &graphql.Field{
					Type: graphql.String,
				},
				"timeStamp": &graphql.Field{
					Type: graphql.Int,
				},
				"recordType": &graphql.Field{
					Type: Gql__enum_AllActionsByAddressResult_RecordType(),
				},
			},
		})
	}
	return gql__type_AllActionsByAddressResult
}

func Gql__type_AllActionsByAddressResponse() *graphql.Object {
	if gql__type_AllActionsByAddressResponse == nil {
		gql__type_AllActionsByAddressResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_AllActionsByAddressResponse",
			Fields: graphql.Fields{
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"results": &graphql.Field{
					Type: graphql.NewList(Gql__type_AllActionsByAddressResult()),
				},
			},
		})
	}
	return gql__type_AllActionsByAddressResponse
}

func Gql__type_ActionsRequest() *graphql.Object {
	if gql__type_ActionsRequest == nil {
		gql__type_ActionsRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_ActionsRequest",
			Fields: graphql.Fields{
				"address": &graphql.Field{
					Type: graphql.String,
				},
				"height": &graphql.Field{
					Type: graphql.Int,
				},
				"offset": &graphql.Field{
					Type: graphql.Int,
				},
				"size": &graphql.Field{
					Type: graphql.Int,
				},
				"sort": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_ActionsRequest
}

func Gql__input_EvmTransferDetailResult() *graphql.InputObject {
	if gql__input_EvmTransferDetailResult == nil {
		gql__input_EvmTransferDetailResult = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_EvmTransferDetailResult",
			Fields: graphql.InputObjectConfigFieldMap{
				"actHash": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"blkHeight": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"sender": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"recipient": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"blkHash": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"timeStamp": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_EvmTransferDetailResult
}

func Gql__input_EvmTransferDetailListByAddressResponse() *graphql.InputObject {
	if gql__input_EvmTransferDetailListByAddressResponse == nil {
		gql__input_EvmTransferDetailListByAddressResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_EvmTransferDetailListByAddressResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"results": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_EvmTransferDetailResult()),
				},
			},
		})
	}
	return gql__input_EvmTransferDetailListByAddressResponse
}

func Gql__input_AllActionsByAddressResult() *graphql.InputObject {
	if gql__input_AllActionsByAddressResult == nil {
		gql__input_AllActionsByAddressResult = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_AllActionsByAddressResult",
			Fields: graphql.InputObjectConfigFieldMap{
				"actHash": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"blkHeight": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"sender": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"recipient": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"actType": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"timeStamp": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"recordType": &graphql.InputObjectFieldConfig{
					Type: Gql__enum_AllActionsByAddressResult_RecordType(),
				},
			},
		})
	}
	return gql__input_AllActionsByAddressResult
}

func Gql__input_AllActionsByAddressResponse() *graphql.InputObject {
	if gql__input_AllActionsByAddressResponse == nil {
		gql__input_AllActionsByAddressResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_AllActionsByAddressResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"results": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_AllActionsByAddressResult()),
				},
			},
		})
	}
	return gql__input_AllActionsByAddressResponse
}

func Gql__input_ActionsRequest() *graphql.InputObject {
	if gql__input_ActionsRequest == nil {
		gql__input_ActionsRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_ActionsRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"address": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"height": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"offset": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"size": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"sort": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_ActionsRequest
}

// graphql__resolver_ActionsService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_ActionsService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_ActionsService creates pointer of service struct
func new_graphql_resolver_ActionsService(conn *grpc.ClientConn) *graphql__resolver_ActionsService {
	return &graphql__resolver_ActionsService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_ActionsService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_ActionsService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"GetEvmTransferDetailListByAddress": &graphql.Field{
			Type: Gql__type_EvmTransferDetailListByAddressResponse(),
			Args: graphql.FieldConfigArgument{
				"address": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"height": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"offset": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"size": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"sort": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ActionsRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for GetEvmTransferDetailListByAddress")
				}
				client := NewActionsServiceClient(conn)
				resp, err := client.GetEvmTransferDetailListByAddress(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetEvmTransferDetailListByAddress")
				}
				return resp, nil
			},
		},
		"GetAllActionsByAddress": &graphql.Field{
			Type: Gql__type_AllActionsByAddressResponse(),
			Args: graphql.FieldConfigArgument{
				"address": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"height": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"offset": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"size": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"sort": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ActionsRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for GetAllActionsByAddress")
				}
				client := NewActionsServiceClient(conn)
				resp, err := client.GetAllActionsByAddress(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetAllActionsByAddress")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_ActionsService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterActionsServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterActionsServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterActionsServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service ActionsService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterActionsServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_ActionsService(conn))
}
