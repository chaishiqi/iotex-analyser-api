// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_RewardDistribution        *graphql.Object      // message RewardDistribution in api_account.proto
	gql__type_HermesResponse            *graphql.Object      // message HermesResponse in api_account.proto
	gql__type_HermesRequest             *graphql.Object      // message HermesRequest in api_account.proto
	gql__type_HermesDistribution        *graphql.Object      // message HermesDistribution in api_account.proto
	gql__type_AccountResponse           *graphql.Object      // message AccountResponse in api_account.proto
	gql__type_AccountRequest            *graphql.Object      // message AccountRequest in api_account.proto
	gql__type_AccountErc20TokenRequest  *graphql.Object      // message AccountErc20TokenRequest in api_account.proto
	gql__input_RewardDistribution       *graphql.InputObject // message RewardDistribution in api_account.proto
	gql__input_HermesResponse           *graphql.InputObject // message HermesResponse in api_account.proto
	gql__input_HermesRequest            *graphql.InputObject // message HermesRequest in api_account.proto
	gql__input_HermesDistribution       *graphql.InputObject // message HermesDistribution in api_account.proto
	gql__input_AccountResponse          *graphql.InputObject // message AccountResponse in api_account.proto
	gql__input_AccountRequest           *graphql.InputObject // message AccountRequest in api_account.proto
	gql__input_AccountErc20TokenRequest *graphql.InputObject // message AccountErc20TokenRequest in api_account.proto
)

func Gql__type_RewardDistribution() *graphql.Object {
	if gql__type_RewardDistribution == nil {
		gql__type_RewardDistribution = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_RewardDistribution",
			Fields: graphql.Fields{
				"voterEthAddress": &graphql.Field{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.Field{
					Type: graphql.String,
				},
				"amount": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_RewardDistribution
}

func Gql__type_HermesResponse() *graphql.Object {
	if gql__type_HermesResponse == nil {
		gql__type_HermesResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_HermesResponse",
			Fields: graphql.Fields{
				"hermesDistribution": &graphql.Field{
					Type: graphql.NewList(Gql__type_HermesDistribution()),
				},
			},
		})
	}
	return gql__type_HermesResponse
}

func Gql__type_HermesRequest() *graphql.Object {
	if gql__type_HermesRequest == nil {
		gql__type_HermesRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_HermesRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"rewardAddress": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_HermesRequest
}

func Gql__type_HermesDistribution() *graphql.Object {
	if gql__type_HermesDistribution == nil {
		gql__type_HermesDistribution = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_HermesDistribution",
			Fields: graphql.Fields{
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
				"rewardDistribution": &graphql.Field{
					Type: graphql.NewList(Gql__type_RewardDistribution()),
				},
				"stakingIotexAddress": &graphql.Field{
					Type: graphql.String,
				},
				"voterCount": &graphql.Field{
					Type: graphql.Int,
				},
				"waiveServiceFee": &graphql.Field{
					Type: graphql.Boolean,
				},
				"refund": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_HermesDistribution
}

func Gql__type_AccountResponse() *graphql.Object {
	if gql__type_AccountResponse == nil {
		gql__type_AccountResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_AccountResponse",
			Fields: graphql.Fields{
				"height": &graphql.Field{
					Type: graphql.Int,
				},
				"contract_address": &graphql.Field{
					Type: graphql.String,
				},
				"balance": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__type_AccountResponse
}

func Gql__type_AccountRequest() *graphql.Object {
	if gql__type_AccountRequest == nil {
		gql__type_AccountRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_AccountRequest",
			Fields: graphql.Fields{
				"address": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
				"height": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_AccountRequest
}

func Gql__type_AccountErc20TokenRequest() *graphql.Object {
	if gql__type_AccountErc20TokenRequest == nil {
		gql__type_AccountErc20TokenRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_AccountErc20TokenRequest",
			Fields: graphql.Fields{
				"address": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
				"height": &graphql.Field{
					Type: graphql.Int,
				},
				"contract_address": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_AccountErc20TokenRequest
}

func Gql__input_RewardDistribution() *graphql.InputObject {
	if gql__input_RewardDistribution == nil {
		gql__input_RewardDistribution = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_RewardDistribution",
			Fields: graphql.InputObjectConfigFieldMap{
				"voterEthAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_RewardDistribution
}

func Gql__input_HermesResponse() *graphql.InputObject {
	if gql__input_HermesResponse == nil {
		gql__input_HermesResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_HermesResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"hermesDistribution": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_HermesDistribution()),
				},
			},
		})
	}
	return gql__input_HermesResponse
}

func Gql__input_HermesRequest() *graphql.InputObject {
	if gql__input_HermesRequest == nil {
		gql__input_HermesRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_HermesRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"rewardAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_HermesRequest
}

func Gql__input_HermesDistribution() *graphql.InputObject {
	if gql__input_HermesDistribution == nil {
		gql__input_HermesDistribution = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_HermesDistribution",
			Fields: graphql.InputObjectConfigFieldMap{
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"rewardDistribution": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_RewardDistribution()),
				},
				"stakingIotexAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"voterCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"waiveServiceFee": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"refund": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_HermesDistribution
}

func Gql__input_AccountResponse() *graphql.InputObject {
	if gql__input_AccountResponse == nil {
		gql__input_AccountResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_AccountResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"height": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"contract_address": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"balance": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__input_AccountResponse
}

func Gql__input_AccountRequest() *graphql.InputObject {
	if gql__input_AccountRequest == nil {
		gql__input_AccountRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_AccountRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"address": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
				"height": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_AccountRequest
}

func Gql__input_AccountErc20TokenRequest() *graphql.InputObject {
	if gql__input_AccountErc20TokenRequest == nil {
		gql__input_AccountErc20TokenRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_AccountErc20TokenRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"address": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
				"height": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"contract_address": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_AccountErc20TokenRequest
}

// graphql__resolver_AccountService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_AccountService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_AccountService creates pointer of service struct
func new_graphql_resolver_AccountService(conn *grpc.ClientConn) *graphql__resolver_AccountService {
	return &graphql__resolver_AccountService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_AccountService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_AccountService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"Hermes": &graphql.Field{
			Type: Gql__type_HermesResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"rewardAddress": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req HermesRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for Hermes")
				}
				client := NewAccountServiceClient(conn)
				resp, err := client.Hermes(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Hermes")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_AccountService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterAccountServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterAccountServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterAccountServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service AccountService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterAccountServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_AccountService(conn))
}
