// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_VotingMetaResponse_CandidateMeta             *graphql.Object      // message VotingMetaResponse.CandidateMeta in api_voting.proto
	gql__type_VotingMetaResponse                           *graphql.Object      // message VotingMetaResponse in api_voting.proto
	gql__type_VotingMetaRequest                            *graphql.Object      // message VotingMetaRequest in api_voting.proto
	gql__type_RewardSourcesResponse_DelegateDistributions  *graphql.Object      // message RewardSourcesResponse.DelegateDistributions in api_voting.proto
	gql__type_RewardSourcesResponse                        *graphql.Object      // message RewardSourcesResponse in api_voting.proto
	gql__type_RewardSourcesRequest                         *graphql.Object      // message RewardSourcesRequest in api_voting.proto
	gql__type_CandidateInfoResponse_Candidates             *graphql.Object      // message CandidateInfoResponse.Candidates in api_voting.proto
	gql__type_CandidateInfoResponse_CandidateInfo          *graphql.Object      // message CandidateInfoResponse.CandidateInfo in api_voting.proto
	gql__type_CandidateInfoResponse                        *graphql.Object      // message CandidateInfoResponse in api_voting.proto
	gql__type_CandidateInfoRequest                         *graphql.Object      // message CandidateInfoRequest in api_voting.proto
	gql__input_VotingMetaResponse_CandidateMeta            *graphql.InputObject // message VotingMetaResponse.CandidateMeta in api_voting.proto
	gql__input_VotingMetaResponse                          *graphql.InputObject // message VotingMetaResponse in api_voting.proto
	gql__input_VotingMetaRequest                           *graphql.InputObject // message VotingMetaRequest in api_voting.proto
	gql__input_RewardSourcesResponse_DelegateDistributions *graphql.InputObject // message RewardSourcesResponse.DelegateDistributions in api_voting.proto
	gql__input_RewardSourcesResponse                       *graphql.InputObject // message RewardSourcesResponse in api_voting.proto
	gql__input_RewardSourcesRequest                        *graphql.InputObject // message RewardSourcesRequest in api_voting.proto
	gql__input_CandidateInfoResponse_Candidates            *graphql.InputObject // message CandidateInfoResponse.Candidates in api_voting.proto
	gql__input_CandidateInfoResponse_CandidateInfo         *graphql.InputObject // message CandidateInfoResponse.CandidateInfo in api_voting.proto
	gql__input_CandidateInfoResponse                       *graphql.InputObject // message CandidateInfoResponse in api_voting.proto
	gql__input_CandidateInfoRequest                        *graphql.InputObject // message CandidateInfoRequest in api_voting.proto
)

func Gql__type_VotingMetaResponse_CandidateMeta() *graphql.Object {
	if gql__type_VotingMetaResponse_CandidateMeta == nil {
		gql__type_VotingMetaResponse_CandidateMeta = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_VotingMetaResponse_CandidateMeta",
			Fields: graphql.Fields{
				"epochNumber": &graphql.Field{
					Type: graphql.Int,
				},
				"consensusDelegates": &graphql.Field{
					Type: graphql.Int,
				},
				"totalCandidates": &graphql.Field{
					Type: graphql.Int,
				},
				"totalWeightedVotes": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_VotingMetaResponse_CandidateMeta
}

func Gql__type_VotingMetaResponse() *graphql.Object {
	if gql__type_VotingMetaResponse == nil {
		gql__type_VotingMetaResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_VotingMetaResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"candidateMeta": &graphql.Field{
					Type: graphql.NewList(Gql__type_VotingMetaResponse_CandidateMeta()),
				},
			},
		})
	}
	return gql__type_VotingMetaResponse
}

func Gql__type_VotingMetaRequest() *graphql.Object {
	if gql__type_VotingMetaRequest == nil {
		gql__type_VotingMetaRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_VotingMetaRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_VotingMetaRequest
}

func Gql__type_RewardSourcesResponse_DelegateDistributions() *graphql.Object {
	if gql__type_RewardSourcesResponse_DelegateDistributions == nil {
		gql__type_RewardSourcesResponse_DelegateDistributions = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_RewardSourcesResponse_DelegateDistributions",
			Fields: graphql.Fields{
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
				"amount": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_RewardSourcesResponse_DelegateDistributions
}

func Gql__type_RewardSourcesResponse() *graphql.Object {
	if gql__type_RewardSourcesResponse == nil {
		gql__type_RewardSourcesResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_RewardSourcesResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"delegateDistributions": &graphql.Field{
					Type: graphql.NewList(Gql__type_RewardSourcesResponse_DelegateDistributions()),
				},
			},
		})
	}
	return gql__type_RewardSourcesResponse
}

func Gql__type_RewardSourcesRequest() *graphql.Object {
	if gql__type_RewardSourcesRequest == nil {
		gql__type_RewardSourcesRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_RewardSourcesRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"voterIotxAddress": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_RewardSourcesRequest
}

func Gql__type_CandidateInfoResponse_Candidates() *graphql.Object {
	if gql__type_CandidateInfoResponse_Candidates == nil {
		gql__type_CandidateInfoResponse_Candidates = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_CandidateInfoResponse_Candidates",
			Fields: graphql.Fields{
				"name": &graphql.Field{
					Type: graphql.String,
				},
				"address": &graphql.Field{
					Type: graphql.String,
				},
				"totalWeightedVotes": &graphql.Field{
					Type: graphql.String,
				},
				"selfStakingTokens": &graphql.Field{
					Type: graphql.String,
				},
				"operatorAddress": &graphql.Field{
					Type: graphql.String,
				},
				"rewardAddress": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_CandidateInfoResponse_Candidates
}

func Gql__type_CandidateInfoResponse_CandidateInfo() *graphql.Object {
	if gql__type_CandidateInfoResponse_CandidateInfo == nil {
		gql__type_CandidateInfoResponse_CandidateInfo = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_CandidateInfoResponse_CandidateInfo",
			Fields: graphql.Fields{
				"epochNumber": &graphql.Field{
					Type: graphql.Int,
				},
				"candidates": &graphql.Field{
					Type: graphql.NewList(Gql__type_CandidateInfoResponse_Candidates()),
				},
			},
		})
	}
	return gql__type_CandidateInfoResponse_CandidateInfo
}

func Gql__type_CandidateInfoResponse() *graphql.Object {
	if gql__type_CandidateInfoResponse == nil {
		gql__type_CandidateInfoResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_CandidateInfoResponse",
			Fields: graphql.Fields{
				"candidateInfo": &graphql.Field{
					Type: graphql.NewList(Gql__type_CandidateInfoResponse_CandidateInfo()),
				},
			},
		})
	}
	return gql__type_CandidateInfoResponse
}

func Gql__type_CandidateInfoRequest() *graphql.Object {
	if gql__type_CandidateInfoRequest == nil {
		gql__type_CandidateInfoRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_CandidateInfoRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_CandidateInfoRequest
}

func Gql__input_VotingMetaResponse_CandidateMeta() *graphql.InputObject {
	if gql__input_VotingMetaResponse_CandidateMeta == nil {
		gql__input_VotingMetaResponse_CandidateMeta = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_VotingMetaResponse_CandidateMeta",
			Fields: graphql.InputObjectConfigFieldMap{
				"epochNumber": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"consensusDelegates": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"totalCandidates": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"totalWeightedVotes": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_VotingMetaResponse_CandidateMeta
}

func Gql__input_VotingMetaResponse() *graphql.InputObject {
	if gql__input_VotingMetaResponse == nil {
		gql__input_VotingMetaResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_VotingMetaResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"candidateMeta": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_VotingMetaResponse_CandidateMeta()),
				},
			},
		})
	}
	return gql__input_VotingMetaResponse
}

func Gql__input_VotingMetaRequest() *graphql.InputObject {
	if gql__input_VotingMetaRequest == nil {
		gql__input_VotingMetaRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_VotingMetaRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_VotingMetaRequest
}

func Gql__input_RewardSourcesResponse_DelegateDistributions() *graphql.InputObject {
	if gql__input_RewardSourcesResponse_DelegateDistributions == nil {
		gql__input_RewardSourcesResponse_DelegateDistributions = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_RewardSourcesResponse_DelegateDistributions",
			Fields: graphql.InputObjectConfigFieldMap{
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_RewardSourcesResponse_DelegateDistributions
}

func Gql__input_RewardSourcesResponse() *graphql.InputObject {
	if gql__input_RewardSourcesResponse == nil {
		gql__input_RewardSourcesResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_RewardSourcesResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"delegateDistributions": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_RewardSourcesResponse_DelegateDistributions()),
				},
			},
		})
	}
	return gql__input_RewardSourcesResponse
}

func Gql__input_RewardSourcesRequest() *graphql.InputObject {
	if gql__input_RewardSourcesRequest == nil {
		gql__input_RewardSourcesRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_RewardSourcesRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"voterIotxAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_RewardSourcesRequest
}

func Gql__input_CandidateInfoResponse_Candidates() *graphql.InputObject {
	if gql__input_CandidateInfoResponse_Candidates == nil {
		gql__input_CandidateInfoResponse_Candidates = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_CandidateInfoResponse_Candidates",
			Fields: graphql.InputObjectConfigFieldMap{
				"name": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"address": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"totalWeightedVotes": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"selfStakingTokens": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"operatorAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"rewardAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_CandidateInfoResponse_Candidates
}

func Gql__input_CandidateInfoResponse_CandidateInfo() *graphql.InputObject {
	if gql__input_CandidateInfoResponse_CandidateInfo == nil {
		gql__input_CandidateInfoResponse_CandidateInfo = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_CandidateInfoResponse_CandidateInfo",
			Fields: graphql.InputObjectConfigFieldMap{
				"epochNumber": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"candidates": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_CandidateInfoResponse_Candidates()),
				},
			},
		})
	}
	return gql__input_CandidateInfoResponse_CandidateInfo
}

func Gql__input_CandidateInfoResponse() *graphql.InputObject {
	if gql__input_CandidateInfoResponse == nil {
		gql__input_CandidateInfoResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_CandidateInfoResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"candidateInfo": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_CandidateInfoResponse_CandidateInfo()),
				},
			},
		})
	}
	return gql__input_CandidateInfoResponse
}

func Gql__input_CandidateInfoRequest() *graphql.InputObject {
	if gql__input_CandidateInfoRequest == nil {
		gql__input_CandidateInfoRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_CandidateInfoRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_CandidateInfoRequest
}

// graphql__resolver_VotingService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_VotingService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_VotingService creates pointer of service struct
func new_graphql_resolver_VotingService(conn *grpc.ClientConn) *graphql__resolver_VotingService {
	return &graphql__resolver_VotingService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_VotingService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_VotingService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"CandidateInfo": &graphql.Field{
			Type: Gql__type_CandidateInfoResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req CandidateInfoRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for CandidateInfo")
				}
				client := NewVotingServiceClient(conn)
				resp, err := client.CandidateInfo(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC CandidateInfo")
				}
				return resp, nil
			},
		},
		"RewardSources": &graphql.Field{
			Type: Gql__type_RewardSourcesResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"voterIotxAddress": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req RewardSourcesRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for RewardSources")
				}
				client := NewVotingServiceClient(conn)
				resp, err := client.RewardSources(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC RewardSources")
				}
				return resp, nil
			},
		},
		"VotingMeta": &graphql.Field{
			Type: Gql__type_VotingMetaResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req VotingMetaRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for VotingMeta")
				}
				client := NewVotingServiceClient(conn)
				resp, err := client.VotingMeta(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC VotingMeta")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_VotingService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterVotingServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterVotingServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterVotingServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service VotingService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterVotingServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_VotingService(conn))
}
