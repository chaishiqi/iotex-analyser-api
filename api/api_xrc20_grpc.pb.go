// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XRC20ServiceClient is the client API for XRC20Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XRC20ServiceClient interface {
	//XRC20ByAddress returns Xrc20 actions given the sender address or recipient address
	XRC20ByAddress(ctx context.Context, in *XRC20ByAddressRequest, opts ...grpc.CallOption) (*XRC20ByAddressResponse, error)
	//XRC20ByContractAddress returns Xrc20 actions given the Xrc20 contract address
	XRC20ByContractAddress(ctx context.Context, in *XRC20ByContractAddressRequest, opts ...grpc.CallOption) (*XRC20ByContractAddressResponse, error)
	//XRC20ByPage returns Xrc20 actions by pagination
	XRC20ByPage(ctx context.Context, in *XRC20ByPageRequest, opts ...grpc.CallOption) (*XRC20ByPageResponse, error)
	//XRC20Addresses returns Xrc20 contract addresses
	XRC20Addresses(ctx context.Context, in *XRC20AddressesRequest, opts ...grpc.CallOption) (*XRC20AddressesResponse, error)
	//XRC20TokenHolderAddresses returns Xrc20 token holder addresses given a Xrc20 contract address
	XRC20TokenHolderAddresses(ctx context.Context, in *XRC20TokenHolderAddressesRequest, opts ...grpc.CallOption) (*XRC20TokenHolderAddressesResponse, error)
}

type xRC20ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXRC20ServiceClient(cc grpc.ClientConnInterface) XRC20ServiceClient {
	return &xRC20ServiceClient{cc}
}

func (c *xRC20ServiceClient) XRC20ByAddress(ctx context.Context, in *XRC20ByAddressRequest, opts ...grpc.CallOption) (*XRC20ByAddressResponse, error) {
	out := new(XRC20ByAddressResponse)
	err := c.cc.Invoke(ctx, "/api.XRC20Service/XRC20ByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRC20ServiceClient) XRC20ByContractAddress(ctx context.Context, in *XRC20ByContractAddressRequest, opts ...grpc.CallOption) (*XRC20ByContractAddressResponse, error) {
	out := new(XRC20ByContractAddressResponse)
	err := c.cc.Invoke(ctx, "/api.XRC20Service/XRC20ByContractAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRC20ServiceClient) XRC20ByPage(ctx context.Context, in *XRC20ByPageRequest, opts ...grpc.CallOption) (*XRC20ByPageResponse, error) {
	out := new(XRC20ByPageResponse)
	err := c.cc.Invoke(ctx, "/api.XRC20Service/XRC20ByPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRC20ServiceClient) XRC20Addresses(ctx context.Context, in *XRC20AddressesRequest, opts ...grpc.CallOption) (*XRC20AddressesResponse, error) {
	out := new(XRC20AddressesResponse)
	err := c.cc.Invoke(ctx, "/api.XRC20Service/XRC20Addresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRC20ServiceClient) XRC20TokenHolderAddresses(ctx context.Context, in *XRC20TokenHolderAddressesRequest, opts ...grpc.CallOption) (*XRC20TokenHolderAddressesResponse, error) {
	out := new(XRC20TokenHolderAddressesResponse)
	err := c.cc.Invoke(ctx, "/api.XRC20Service/XRC20TokenHolderAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XRC20ServiceServer is the server API for XRC20Service service.
// All implementations must embed UnimplementedXRC20ServiceServer
// for forward compatibility
type XRC20ServiceServer interface {
	//XRC20ByAddress returns Xrc20 actions given the sender address or recipient address
	XRC20ByAddress(context.Context, *XRC20ByAddressRequest) (*XRC20ByAddressResponse, error)
	//XRC20ByContractAddress returns Xrc20 actions given the Xrc20 contract address
	XRC20ByContractAddress(context.Context, *XRC20ByContractAddressRequest) (*XRC20ByContractAddressResponse, error)
	//XRC20ByPage returns Xrc20 actions by pagination
	XRC20ByPage(context.Context, *XRC20ByPageRequest) (*XRC20ByPageResponse, error)
	//XRC20Addresses returns Xrc20 contract addresses
	XRC20Addresses(context.Context, *XRC20AddressesRequest) (*XRC20AddressesResponse, error)
	//XRC20TokenHolderAddresses returns Xrc20 token holder addresses given a Xrc20 contract address
	XRC20TokenHolderAddresses(context.Context, *XRC20TokenHolderAddressesRequest) (*XRC20TokenHolderAddressesResponse, error)
	mustEmbedUnimplementedXRC20ServiceServer()
}

// UnimplementedXRC20ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedXRC20ServiceServer struct {
}

func (UnimplementedXRC20ServiceServer) XRC20ByAddress(context.Context, *XRC20ByAddressRequest) (*XRC20ByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XRC20ByAddress not implemented")
}
func (UnimplementedXRC20ServiceServer) XRC20ByContractAddress(context.Context, *XRC20ByContractAddressRequest) (*XRC20ByContractAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XRC20ByContractAddress not implemented")
}
func (UnimplementedXRC20ServiceServer) XRC20ByPage(context.Context, *XRC20ByPageRequest) (*XRC20ByPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XRC20ByPage not implemented")
}
func (UnimplementedXRC20ServiceServer) XRC20Addresses(context.Context, *XRC20AddressesRequest) (*XRC20AddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XRC20Addresses not implemented")
}
func (UnimplementedXRC20ServiceServer) XRC20TokenHolderAddresses(context.Context, *XRC20TokenHolderAddressesRequest) (*XRC20TokenHolderAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XRC20TokenHolderAddresses not implemented")
}
func (UnimplementedXRC20ServiceServer) mustEmbedUnimplementedXRC20ServiceServer() {}

// UnsafeXRC20ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XRC20ServiceServer will
// result in compilation errors.
type UnsafeXRC20ServiceServer interface {
	mustEmbedUnimplementedXRC20ServiceServer()
}

func RegisterXRC20ServiceServer(s grpc.ServiceRegistrar, srv XRC20ServiceServer) {
	s.RegisterService(&XRC20Service_ServiceDesc, srv)
}

func _XRC20Service_XRC20ByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRC20ByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRC20ServiceServer).XRC20ByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.XRC20Service/XRC20ByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRC20ServiceServer).XRC20ByAddress(ctx, req.(*XRC20ByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRC20Service_XRC20ByContractAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRC20ByContractAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRC20ServiceServer).XRC20ByContractAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.XRC20Service/XRC20ByContractAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRC20ServiceServer).XRC20ByContractAddress(ctx, req.(*XRC20ByContractAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRC20Service_XRC20ByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRC20ByPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRC20ServiceServer).XRC20ByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.XRC20Service/XRC20ByPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRC20ServiceServer).XRC20ByPage(ctx, req.(*XRC20ByPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRC20Service_XRC20Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRC20AddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRC20ServiceServer).XRC20Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.XRC20Service/XRC20Addresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRC20ServiceServer).XRC20Addresses(ctx, req.(*XRC20AddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRC20Service_XRC20TokenHolderAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XRC20TokenHolderAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRC20ServiceServer).XRC20TokenHolderAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.XRC20Service/XRC20TokenHolderAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRC20ServiceServer).XRC20TokenHolderAddresses(ctx, req.(*XRC20TokenHolderAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XRC20Service_ServiceDesc is the grpc.ServiceDesc for XRC20Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XRC20Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.XRC20Service",
	HandlerType: (*XRC20ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XRC20ByAddress",
			Handler:    _XRC20Service_XRC20ByAddress_Handler,
		},
		{
			MethodName: "XRC20ByContractAddress",
			Handler:    _XRC20Service_XRC20ByContractAddress_Handler,
		},
		{
			MethodName: "XRC20ByPage",
			Handler:    _XRC20Service_XRC20ByPage_Handler,
		},
		{
			MethodName: "XRC20Addresses",
			Handler:    _XRC20Service_XRC20Addresses_Handler,
		},
		{
			MethodName: "XRC20TokenHolderAddresses",
			Handler:    _XRC20Service_XRC20TokenHolderAddresses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_xrc20.proto",
}
