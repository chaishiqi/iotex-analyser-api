// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	pagination "github.com/iotexproject/iotex-analyser-api/api/pagination"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_Xrc721Action                        *graphql.Object      // message Xrc721Action in api_xrc721.proto
	gql__type_XRC721TokenHolderAddressesResponse  *graphql.Object      // message XRC721TokenHolderAddressesResponse in api_xrc721.proto
	gql__type_XRC721TokenHolderAddressesRequest   *graphql.Object      // message XRC721TokenHolderAddressesRequest in api_xrc721.proto
	gql__type_XRC721ByPageResponse                *graphql.Object      // message XRC721ByPageResponse in api_xrc721.proto
	gql__type_XRC721ByPageRequest                 *graphql.Object      // message XRC721ByPageRequest in api_xrc721.proto
	gql__type_XRC721ByContractAddressResponse     *graphql.Object      // message XRC721ByContractAddressResponse in api_xrc721.proto
	gql__type_XRC721ByContractAddressRequest      *graphql.Object      // message XRC721ByContractAddressRequest in api_xrc721.proto
	gql__type_XRC721ByAddressResponse             *graphql.Object      // message XRC721ByAddressResponse in api_xrc721.proto
	gql__type_XRC721ByAddressRequest              *graphql.Object      // message XRC721ByAddressRequest in api_xrc721.proto
	gql__type_XRC721AddressesResponse             *graphql.Object      // message XRC721AddressesResponse in api_xrc721.proto
	gql__type_XRC721AddressesRequest              *graphql.Object      // message XRC721AddressesRequest in api_xrc721.proto
	gql__input_Xrc721Action                       *graphql.InputObject // message Xrc721Action in api_xrc721.proto
	gql__input_XRC721TokenHolderAddressesResponse *graphql.InputObject // message XRC721TokenHolderAddressesResponse in api_xrc721.proto
	gql__input_XRC721TokenHolderAddressesRequest  *graphql.InputObject // message XRC721TokenHolderAddressesRequest in api_xrc721.proto
	gql__input_XRC721ByPageResponse               *graphql.InputObject // message XRC721ByPageResponse in api_xrc721.proto
	gql__input_XRC721ByPageRequest                *graphql.InputObject // message XRC721ByPageRequest in api_xrc721.proto
	gql__input_XRC721ByContractAddressResponse    *graphql.InputObject // message XRC721ByContractAddressResponse in api_xrc721.proto
	gql__input_XRC721ByContractAddressRequest     *graphql.InputObject // message XRC721ByContractAddressRequest in api_xrc721.proto
	gql__input_XRC721ByAddressResponse            *graphql.InputObject // message XRC721ByAddressResponse in api_xrc721.proto
	gql__input_XRC721ByAddressRequest             *graphql.InputObject // message XRC721ByAddressRequest in api_xrc721.proto
	gql__input_XRC721AddressesResponse            *graphql.InputObject // message XRC721AddressesResponse in api_xrc721.proto
	gql__input_XRC721AddressesRequest             *graphql.InputObject // message XRC721AddressesRequest in api_xrc721.proto
)

func Gql__type_Xrc721Action() *graphql.Object {
	if gql__type_Xrc721Action == nil {
		gql__type_Xrc721Action = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_Xrc721Action",
			Fields: graphql.Fields{
				"actHash": &graphql.Field{
					Type: graphql.String,
				},
				"sender": &graphql.Field{
					Type: graphql.String,
				},
				"recipient": &graphql.Field{
					Type: graphql.String,
				},
				"amount": &graphql.Field{
					Type: graphql.String,
				},
				"timestamp": &graphql.Field{
					Type: graphql.Int,
				},
				"contract": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_Xrc721Action
}

func Gql__type_XRC721TokenHolderAddressesResponse() *graphql.Object {
	if gql__type_XRC721TokenHolderAddressesResponse == nil {
		gql__type_XRC721TokenHolderAddressesResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721TokenHolderAddressesResponse",
			Fields: graphql.Fields{
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"addresses": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__type_XRC721TokenHolderAddressesResponse
}

func Gql__type_XRC721TokenHolderAddressesRequest() *graphql.Object {
	if gql__type_XRC721TokenHolderAddressesRequest == nil {
		gql__type_XRC721TokenHolderAddressesRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721TokenHolderAddressesRequest",
			Fields: graphql.Fields{
				"tokenAddress": &graphql.Field{
					Type: graphql.String,
				},
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_XRC721TokenHolderAddressesRequest
}

func Gql__type_XRC721ByPageResponse() *graphql.Object {
	if gql__type_XRC721ByPageResponse == nil {
		gql__type_XRC721ByPageResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721ByPageResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"xrc721": &graphql.Field{
					Type: graphql.NewList(Gql__type_Xrc721Action()),
				},
			},
		})
	}
	return gql__type_XRC721ByPageResponse
}

func Gql__type_XRC721ByPageRequest() *graphql.Object {
	if gql__type_XRC721ByPageRequest == nil {
		gql__type_XRC721ByPageRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721ByPageRequest",
			Fields: graphql.Fields{
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_XRC721ByPageRequest
}

func Gql__type_XRC721ByContractAddressResponse() *graphql.Object {
	if gql__type_XRC721ByContractAddressResponse == nil {
		gql__type_XRC721ByContractAddressResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721ByContractAddressResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"xrc721": &graphql.Field{
					Type: graphql.NewList(Gql__type_Xrc721Action()),
				},
			},
		})
	}
	return gql__type_XRC721ByContractAddressResponse
}

func Gql__type_XRC721ByContractAddressRequest() *graphql.Object {
	if gql__type_XRC721ByContractAddressRequest == nil {
		gql__type_XRC721ByContractAddressRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721ByContractAddressRequest",
			Fields: graphql.Fields{
				"address": &graphql.Field{
					Type: graphql.String,
				},
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_XRC721ByContractAddressRequest
}

func Gql__type_XRC721ByAddressResponse() *graphql.Object {
	if gql__type_XRC721ByAddressResponse == nil {
		gql__type_XRC721ByAddressResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721ByAddressResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"xrc721": &graphql.Field{
					Type: graphql.NewList(Gql__type_Xrc721Action()),
				},
			},
		})
	}
	return gql__type_XRC721ByAddressResponse
}

func Gql__type_XRC721ByAddressRequest() *graphql.Object {
	if gql__type_XRC721ByAddressRequest == nil {
		gql__type_XRC721ByAddressRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721ByAddressRequest",
			Fields: graphql.Fields{
				"address": &graphql.Field{
					Type: graphql.String,
				},
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_XRC721ByAddressRequest
}

func Gql__type_XRC721AddressesResponse() *graphql.Object {
	if gql__type_XRC721AddressesResponse == nil {
		gql__type_XRC721AddressesResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721AddressesResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"addresses": &graphql.Field{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__type_XRC721AddressesResponse
}

func Gql__type_XRC721AddressesRequest() *graphql.Object {
	if gql__type_XRC721AddressesRequest == nil {
		gql__type_XRC721AddressesRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_XRC721AddressesRequest",
			Fields: graphql.Fields{
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_XRC721AddressesRequest
}

func Gql__input_Xrc721Action() *graphql.InputObject {
	if gql__input_Xrc721Action == nil {
		gql__input_Xrc721Action = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_Xrc721Action",
			Fields: graphql.InputObjectConfigFieldMap{
				"actHash": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"sender": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"recipient": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"timestamp": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"contract": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_Xrc721Action
}

func Gql__input_XRC721TokenHolderAddressesResponse() *graphql.InputObject {
	if gql__input_XRC721TokenHolderAddressesResponse == nil {
		gql__input_XRC721TokenHolderAddressesResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721TokenHolderAddressesResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"addresses": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__input_XRC721TokenHolderAddressesResponse
}

func Gql__input_XRC721TokenHolderAddressesRequest() *graphql.InputObject {
	if gql__input_XRC721TokenHolderAddressesRequest == nil {
		gql__input_XRC721TokenHolderAddressesRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721TokenHolderAddressesRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"tokenAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_XRC721TokenHolderAddressesRequest
}

func Gql__input_XRC721ByPageResponse() *graphql.InputObject {
	if gql__input_XRC721ByPageResponse == nil {
		gql__input_XRC721ByPageResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721ByPageResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"xrc721": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Xrc721Action()),
				},
			},
		})
	}
	return gql__input_XRC721ByPageResponse
}

func Gql__input_XRC721ByPageRequest() *graphql.InputObject {
	if gql__input_XRC721ByPageRequest == nil {
		gql__input_XRC721ByPageRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721ByPageRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_XRC721ByPageRequest
}

func Gql__input_XRC721ByContractAddressResponse() *graphql.InputObject {
	if gql__input_XRC721ByContractAddressResponse == nil {
		gql__input_XRC721ByContractAddressResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721ByContractAddressResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"xrc721": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Xrc721Action()),
				},
			},
		})
	}
	return gql__input_XRC721ByContractAddressResponse
}

func Gql__input_XRC721ByContractAddressRequest() *graphql.InputObject {
	if gql__input_XRC721ByContractAddressRequest == nil {
		gql__input_XRC721ByContractAddressRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721ByContractAddressRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"address": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_XRC721ByContractAddressRequest
}

func Gql__input_XRC721ByAddressResponse() *graphql.InputObject {
	if gql__input_XRC721ByAddressResponse == nil {
		gql__input_XRC721ByAddressResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721ByAddressResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"xrc721": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_Xrc721Action()),
				},
			},
		})
	}
	return gql__input_XRC721ByAddressResponse
}

func Gql__input_XRC721ByAddressRequest() *graphql.InputObject {
	if gql__input_XRC721ByAddressRequest == nil {
		gql__input_XRC721ByAddressRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721ByAddressRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"address": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_XRC721ByAddressRequest
}

func Gql__input_XRC721AddressesResponse() *graphql.InputObject {
	if gql__input_XRC721AddressesResponse == nil {
		gql__input_XRC721AddressesResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721AddressesResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"addresses": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(graphql.String),
				},
			},
		})
	}
	return gql__input_XRC721AddressesResponse
}

func Gql__input_XRC721AddressesRequest() *graphql.InputObject {
	if gql__input_XRC721AddressesRequest == nil {
		gql__input_XRC721AddressesRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_XRC721AddressesRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_XRC721AddressesRequest
}

// graphql__resolver_XRC721Service is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_XRC721Service struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_XRC721Service creates pointer of service struct
func new_graphql_resolver_XRC721Service(conn *grpc.ClientConn) *graphql__resolver_XRC721Service {
	return &graphql__resolver_XRC721Service{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_XRC721Service) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_XRC721Service) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"XRC721ByAddress": &graphql.Field{
			Type: Gql__type_XRC721ByAddressResponse(),
			Args: graphql.FieldConfigArgument{
				"address": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req XRC721ByAddressRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for XRC721ByAddress")
				}
				client := NewXRC721ServiceClient(conn)
				resp, err := client.XRC721ByAddress(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC XRC721ByAddress")
				}
				return resp, nil
			},
		},
		"XRC721ByContractAddress": &graphql.Field{
			Type: Gql__type_XRC721ByContractAddressResponse(),
			Args: graphql.FieldConfigArgument{
				"address": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req XRC721ByContractAddressRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for XRC721ByContractAddress")
				}
				client := NewXRC721ServiceClient(conn)
				resp, err := client.XRC721ByContractAddress(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC XRC721ByContractAddress")
				}
				return resp, nil
			},
		},
		"XRC721ByPage": &graphql.Field{
			Type: Gql__type_XRC721ByPageResponse(),
			Args: graphql.FieldConfigArgument{
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req XRC721ByPageRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for XRC721ByPage")
				}
				client := NewXRC721ServiceClient(conn)
				resp, err := client.XRC721ByPage(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC XRC721ByPage")
				}
				return resp, nil
			},
		},
		"XRC721Addresses": &graphql.Field{
			Type: Gql__type_XRC721AddressesResponse(),
			Args: graphql.FieldConfigArgument{
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req XRC721AddressesRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for XRC721Addresses")
				}
				client := NewXRC721ServiceClient(conn)
				resp, err := client.XRC721Addresses(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC XRC721Addresses")
				}
				return resp, nil
			},
		},
		"XRC721TokenHolderAddresses": &graphql.Field{
			Type: Gql__type_XRC721TokenHolderAddressesResponse(),
			Args: graphql.FieldConfigArgument{
				"tokenAddress": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req XRC721TokenHolderAddressesRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for XRC721TokenHolderAddresses")
				}
				client := NewXRC721ServiceClient(conn)
				resp, err := client.XRC721TokenHolderAddresses(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC XRC721TokenHolderAddresses")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_XRC721Service) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterXRC721ServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterXRC721ServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterXRC721ServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service XRC721Service {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterXRC721ServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_XRC721Service(conn))
}
